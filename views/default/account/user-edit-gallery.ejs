<main>
  <article>
    <h1>Gallery: <%= album.name %></h1>
    <% if (view.message) { %>
    <div id="messages" class="messages">
      <span><%= view.message %></span>
    </div>
    <% } %>
    <% if (view.error) { %>
    <div id="errors" class="errors">
      <span><%= view.error%></span>
    </div>
    <% } %>
    <div class="gallery">
      <form name="edit" id="edit_Id" action="/account/galleries/<%= album.id %>" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>Make changes to gallery</legend>
          <div id="galleryUpdateMsg" class="messages hidden"></div>
          <div id="galleryUpdateErr" class="errors hidden"></div>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="albumId" id="albumId_Id" value="<%= album.id %>" required>
          <label for="albumName_Id">Album Name:</label>
          <input type="text" name="albumName" id="albumName_Id" value="<%= album.name %>" size="80" tabindex="1">
          <br>
          <label for="albumDescription_Id">Album Description:</label>
          <input type="text" name="albumDescription" id="albumDescription_Id" value="<%= album.description%>" size="80" tabindex="2">
          <br>
          <label for="albumKeywords_Id">Album Keywords:</label>
          <input type="text" name="albumKeywords" id="albumKeywords_Id" value="<%= album.keywords?.join(', ') %>" size="80" tabindex="3">
          <br>
          <label for="albumPublic_Id">Make Public:</label>
          <input type="checkbox" name="albumPublic" id="albumPublic_Id" <%= (album.public) ? "checked" : '' %> tabindex="4">
          <br>
          <label for="albumPreviewImage_Id">Select Preview Image</label>
          <select name="albumPreviewImage" id="albumPreviewImage_Id" tabindex="5">
            <option value=''>--select an image--</option>
            <% album.images.forEach((img) => { %>
              <% if (img.thumbnail) { %>
                <% if (album.previewImage === img.thumbnail) { %> 
                <option value="<%= img.thumbnail %>" selected><%= (img.thumbnail.split('/').slice(-1))[0] %></option>
                <% } else { %>
                <option value="<%= img.thumbnail %>"><%= (img.thumbnail.split('/').slice(-1))[0] %></option>
                <% } %>
              <% } %>
                <% if (album.previewImage === img.url) { %> 
              <option value="<%= img.url %>" selected><%= img.name %></option>    
              <% } else { %>
              <option value="<%= img.url %>"><%= img.name %></option>    
              <% } %>
            <% }) %>
          </select>
          <br>
          <input type="submit" name="submit" id="submYit_Id" value="Update Album" tabindex="6">
          <input type="reset" name="reset" id="reset_Id" value="Clear" tabindex="7">
        </fieldset>
      </form>
      <form name="delete" id="delete_id" action="/account/galleries/delete/<%= album.id %>" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>Delete this gallery</legend>
          <div id="galleryDeleteMsg" class="messages hidden"></div>
          <div id="galleryDeleteErr" class="errors hidden"></div>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="albumId" id="albumId_Id" value="<%= album.id %>" required>
          <input type="submit" name="deleteGallery" id="deleteGallery_Id" value="Permanently delete this gallery." tabindex="1000">
        </fieldset>
      </form>
      <script nonce="<%= nonce %>">
        const origin = '<%= origin %>'
        const jwtAccess = '<%= jwtAccess %>'
        const albumName = '<%= album.name %>'
        const galleryForm = document.forms[0]
        const deleteForm = document.forms[1]
        async function deleteAlbum(e) {
          e.preventDefault()
          e.stopPropagation()
          deleteForm.elements.deleteGallery.disabled = true
          const formdata = new FormData()
          const csrfToken = deleteForm.elements['csrf-token']
          formdata.append('csrfTokenHidden', csrfToken.value)
          const albumId = deleteForm.elements['albumId']
          formdata.append('albumId', albumId.value)
          const opts = {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
              'X-Http-Method-Override': 'delete',
            },
            body: formdata,
          }
          const request = new Request(`${origin}/account/galleries/delete/${albumId.value}`, opts)
          const response = await fetch(request, { credentials: 'same-origin' })
          if (!response.ok) {
            // console.error(response.statusText)
            console.error(response)
          } else {
            const deleteResult = await response.json()
            if (deleteResult.status > 200) {
              const err = document.querySelector('div#galleryDeleteErr')
              err.textContent = 'Delete failed for some reason.'
              err.classList.remove('hidden')
              console.error(deleteResult)
              setTimeout(() => {
                err.classList.add('hidden')
                err.textContent = ''
                deleteForm.elements.deleteGallery.disabled = false
              }, 1750)
            } else {
              console.log(deleteResult)
              const msg = document.querySelector('div#galleryDeleteMsg')
              msg.textContent = 'Gallery deleted.'
              msg.classList.remove('hidden')
              setTimeout(() => {
                msg.classList.add('hidden')
                msg.textContent = ''
              }, 1750)
            }
          }
        }
        deleteForm.addEventListener('submit', deleteAlbum)

        async function updateAlbum(e) {
          e.preventDefault()
          e.stopPropagation()
          const formData = new FormData()
          const csrfToken = galleryForm.elements['csrf-token']
          formData.append('csrfTokenHidden', csrfToken.value)
          const albumId = galleryForm.elements['albumId']
          formData.append('albumId', albumId.value)
          if (galleryForm.elements['albumName'].value !== '') {
            const albumName = galleryForm.elements['albumName']
            formData.append('albumName', albumName.value)
          }
          if (galleryForm.elements['albumDescription'].value !== '') {
            const albumDescription = galleryForm.elements['albumDescription']
            formData.append('albumDescription', albumDescription.value)
          }
          if (galleryForm.elements['albumKeywords'].value !== '') {
            const albumKeywords = galleryForm.elements['albumKeywords']
            formData.append('albumKeywords', albumKeywords.value)
          }
          const prev = galleryForm.elements['albumPreviewImage']
          if (prev[prev.selectedIndex].value !== '') {
            formData.append('albumPreviewImage', prev[prev.selectedIndex].value)
          }
          const albumPublic = galleryForm.elements['albumPublic']
          formData.append('albumPublic', albumPublic.checked)
          const opts = {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
            },
            body: formData,
          }
          const request = new Request(`${origin}/account/galleries/${albumId.value}`, opts)
          // console.log(request)
          const response = await fetch(request, { credentials: 'same-origin' })
          if (!response.ok) {
            console.error(response.statusText)
          } else {
            const updateResult = await response.json()
            if (updateResult.status > 200) {
              const err = document.querySelector('div#galleryUpdateErr')
              err.textContent = 'Update failed for some reason.'
              err.classList.remove('hidden')
              console.error(updateResult)
              setTimeout(() => {
                err.classList.add('hidden')
                err.textContent = ''
              }, 1750)
            } else {
              console.log(updateResult)
              const msg = document.querySelector('div#galleryUpdateMsg')
              msg.textContent = 'Gallery details updated.'
              msg.classList.remove('hidden')
              setTimeout(() => {
                msg.classList.add('hidden')
                msg.textContent = ''
              }, 1750)
              // galleryForm.reset()
            }
          }
        }
        galleryForm.addEventListener('submit', updateAlbum) 

      </script>
    </div>
    <div id="images">
      <% (await album.getJson()).images.forEach((image, i) => { %>
      <div class="imagePair">
        <form id="<%= `${album.name}_${image.name}` %>" name="<%= image.name %>">
          <fieldset>
            <figure style="display: inline-block;">
              <img src="<%= `${origin}/${image.url}` %>" alt="<%= image.description %>" class="imgFull" width="150px">
              <figcaption>Full size image.</figcaption>
            </figure>
            <% if (image.thumbnail) { %>
            <figure style="display: inline-block;">
              <img src="<%= `${origin}/${image.thumbnail}` %>" alt="<%= image.description %>" class="imgThumbnail" width="*">
              <figcaption>Thumbnail image.</figcaption>
            </figure>
            <% } %>
            <br>
            <div id="imageUpdateMsg" class="messages hidden"></div>
            <div id="imageUpdateErr" class="errors hidden"></div>
            <input type="hidden" name="csrf-token" id="csrf-token_Id_<%= i %>" value="<%= csrfToken %>">
            <input type="hidden" name="albumId" id="albumId_Id_<%= i %>" value="<%= album.id %>">
            <label>File Name: <input type="text" name="fileName" id="fileName_Id_<%= i %>" value="<%= image.name %>" disabled></label><br>
            Rotate: 
            <label>
              <img src="/i/rotate_40x40.png" class="rotate right0" title="Rotate clockwise 0&deg; "alt="Rotate clockwise 0&deg;"> 
              <input type="radio" name="rotate" id="rotate_0_<%= i %>" value="0">
            </label>
            <label>
              <img src="/i/rotate_40x40.png" class="rotate right90" title="Rotate clockwise 90&deg; "alt="Rotate clockwise 90&deg;"> 
              <input type="radio" name="rotate" id="rotate_90_<%= i %>" value="90">
            </label>
            <label>
              <img src="/i/rotate_40x40.png" class="rotate flip" title="Rotate clockwise 180&deg; "alt="Rotate clockwise 180&deg;"> 
              <input type="radio" name="rotate" id="rotate_180_<%= i %>" value="180">
            </label>
            <label>
              <img src="/i/rotate_40x40.png" class="rotate right270" title="Rotate clockwise 270&deg; "alt="Rotate clockwise 270&deg;"> 
              <input type="radio" name="rotate" id="rotate_270_<%= i %>" value="270">
            </label>
            <br>
            <label>Title: <input type="text" name="title" id="title_Id_<%= i %>" value="<%= image.title %>" class="title" tabindex="7"></label><br>
            <label>Description: <input type="text" name="description" id="description_Id_<%= i %>" value="<%= image.description %>" class="description" tabindex="7"></label><br>
            <label>Keywords: <input type="text" name="keywords" id="keywords_Id_<%= i %>" value="<%= image.keywords?.join(', ') ?? '' %>" class="keywords" tabindex="7"></label><br>
            <input type="submit" value="Update Image Metadata" tabindex="7">
            <input type="reset" name="reset" id="reset_Id_<%= i %>" value="Reset" tabindex="7">
          </fieldset>
        </form>
      </div>
      <% }) %>
    </div>
    <script nonce="<%= nonce %>">
      function rotateImage(e) {
        e.stopPropagation()
        e.preventDefault()
        const image = e.target.parentElement.parentElement.children[0].children[0]
        const degrees = `${e.target.value}deg`
        image.style.transform = `rotate(${degrees})`
      }
      function imageReset(e) {
        e.target.elements[0].children[0].firstElementChild.style = "transform: rotate(0deg)"
      }
      const imgEditForms = document.querySelectorAll('form[id^="custom-books"]')
      imgEditForms.forEach((f) => {
        f.addEventListener('reset', imageReset)
        f.elements.rotate.forEach((r) => {
          r.addEventListener('change', rotateImage)
        })
      })
      async function updateImage(e) {
        e.stopPropagation()
        e.preventDefault()
        form = e.target
        const formData = new FormData()
        const csrfToken = form.elements['csrf-token']
        formData.append('csrfTokenHidden', csrfToken.value)
        const albumId = form.elements['albumId']
        formData.append('albumId', albumId.value)
        const name = form.elements.fileName
        formData.append('imageName', name.value)
        if (form.element['rotate'].value !== '') {
          const rotate = `${form.element.rotate.value}deg`
          formData.append('rotate', rotate)
        }
        if (form.elements['title'].value !== '') {
          const title = form.elements.title
          formData.append('imageTitle', title.value)
        }
        if (form.elements['description'].value !== '') {
          const description = form.elements.description
          formData.append('imageDescription', description.value)
        }
        if (form.elements['keywords'].value !== '') {
          const keywords = form.elements.keywords
          formData.append('imageKeywords', keywords.value)
        }
        // for (const a of formData.entries()) {
        //   console.log(a)
        // }
        const opts = {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
          body: formData,
        }
        const err = form.querySelector(':scope > fieldset > div#imageUpdateErr')
        const msg = form.querySelector(':scope > fieldset > div#imageUpdateMsg')
        const request = new Request(`${origin}/account/galleries/${albumId.value}/image/${name.value}`, opts)
        let response
        let updateResult
        try {
          response = await fetch(request, { credentials: 'same-origin' })
          console.log(response)
        } catch (e) {
          err.textContent = 'Response was not good.'
          err.classList.remove('hidden')
          console.warn(e)
          return
        }
        if (!response.ok) {
          err.textContent = 'Request failed.'
          err.classList.remove('hidden')
          console.warn(`response status text: (${response.status}) ${response.statusText}`)
          return
        }
        try {
          updateResult = await response.json()
          console.info(updateResult)
          if (response.status > 200) {
            err.textContent = 'Update failed for some reason.'
            err.classList.remove('hidden')
          } else if (response.status === 200 && updateResult?.err) {
            err.textContent = updateResult.msg
            err.classList.remove('hidden')
          } else {
            msg.textContent = 'Image details updated.'
            msg.classList.remove('hidden')
          }
        } catch (e) {
          err.textContent = 'JSON was not good.'
          // err.textContent = updateResult.err
          err.classList.remove('hidden')
          console.warn(e)
          return
        }
      }
      // 
      const imgForms = document.querySelectorAll(`form[id^=${albumName}]`)
      for (const form of imgForms) {
        form.addEventListener('submit', updateImage)
      }
    </script>
  </article>
</main>

