<main>
  <article>
    <h1>Blog: <%= blog.title%></h1>
    <h2><a href="<%= `${origin}/@${sessionUser.username}/blog/${post.slug}` %>"><%= `${origin}/@${sessionUser.username}/blog/${post.url}` %></a></h2>
    <% if (view.message) { %>
    <div id="messages" class="messages">
      <span><%= view.message %></span>
    </div>
    <% } %>
    <% if (view.error) { %>
    <div id="errors" class="errors">
      <span><%= view.error%></span>
    </div>
    <% } %>
    <div class="post">
      <form name="editPost" id="editPost_id" action="/account/blog/post/save" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>New Blog Post</legend>
          <div id="newPostMsg" class="messages hidden"></div>
          <div id="newPostErr" class="errors hidden"></div>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="blogId" id="blogId_Id" value="<%= blog?.id %>" >
          <input type="hidden" name="postId" id="postId_Id" value="<%= post?.id %>" >
          <label for="postTitle_Id">Post Title:</label>
          <input type="text" name="postTitle" id="postTitle_Id" value="<%= post?.title %>" tabindex="1">
          <br>
          <label for="postSlug_Id">Post Url Slug:</label>
          <input type="text" name="postSlug" id="postSlug_Id" value="<%= post?.url %>">
          <br>
          <label for="postDescription_Id">Post Description:</label>
          <textarea id="postDescription_Id" name="postDescription" rows="3" cols="50" tabindex="1"><%= post?.description %></textarea>
          <label for="postContent_Id">Post Content:</label>
          <textarea id="postContent_Id" name="postContent" rows="5" cols="50" tabindex="1"><%= post?.content%></textarea>
          <label for="postKeywords_Id">Post Keywords:</label>
          <input type="text" name="postKeywords" id="postKeywords_Id" value="<%= post?.keywords%>" tabindex="1">
          <br>
          <label for="postPublic">Public:</label>
          <input type="checkbox" name="postPublic" id="postPublic_Id" <%= (post?.public) ? 'checked' : '' %> tabindex="1">
          <br>
          <div stlye="display: table-cell;">
            <label for="previewImageSmall">Preview Image</label>
            <input type="file" name="previewImageSmall" id="previewImageSmall_Id">
            <div id="small">
              <img id="previewSmall" src="<%= (post?.images[0]) ? `${origin}/${post.images[0]}` : '' %>">
            </div>
          </div>
          <br>
          <input type="submit" name="submit" id="submit_Id" value="Update Post" tabindex="6">
          <input type="reset" name="reset" id="reset_Id" value="Reset" tabindex="7">
        </fieldset>
      </form>
      <script nonce="<%= nonce %>">
        const origin = '<%= origin %>'
        const jwtAccess = '<%= jwtAccess %>'
        window.forms = document.forms
        const postForm = forms.namedItem('editPost')
        function checkRequiredValue(elem) {
          if (!elem.value || elem.value === '') {
            elem.classList.add('red-border') 
            elem.focus()
            console.error(`missing required ${elem.name}`)
            return false
          }
          return true
        }
        function displayPreviewImage(e) {
          e.preventDefault()
          e.stopPropagation()
          console.log(e)
          const img = e.target.nextElementSibling.firstElementChild
          console.log(img)
          const fileReader = new window.FileReader()
          fileReader.addEventListener('load', (e) => {
            img.src = e.target.result
          })
          fileReader.readAsDataURL(e.target.files[0])
          console.log(e.target.files[0])
        }
        postForm.elements['previewImageSmall'].addEventListener('change', displayPreviewImage)
        async function createPost(e) {
          e.preventDefault()
          e.stopPropagation()
          const formData = new FormData()
          const csrfTokenHidden = postForm.elements['csrf-token']
          formData.append('csrfTokenHidden', csrfTokenHidden.value)
          const blogId = postForm.elements['blogId']
          formData.append('blogId', blogId.value)
          const postId = postForm.elements['postId']
          formData.append('postId', postId.value)
          const postTitle = postForm.elements['postTitle']
          if (!checkRequiredValue(postTitle)) {
            return false
          }
          formData.append('postTitle', postTitle.value)
          const postSlug = postForm.elements['postSlug']
          formData.append('postSlug', postSlug.value)
          const postDescription = postForm.elements['postDescription']
          formData.append('postDescription', postDescription.value)
          const postContent = postForm.elements['postContent']
          formData.append('postContent', postContent.value)
          const postKeywords = postForm.elements['postKeywords']
          formData.append('postKeywords', postKeywords.value)
          const postPublic = postForm.elements['postPublic']
          formData.append('postPublic', (postPublic.checked) ? 'true' : 'false')
          const small = postForm.elements['previewImageSmall']
          if (small.files.length > 0) {
            formData.append('postPreviewImageSmall', small.files[0])
          }
          const opts = {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`
            },
            body: formData,
          }
          const request = new Request(`${origin}/account/blog/post/save`, opts)
          let response
          let postJson
          try {
            response = await fetch(request, { credentials: 'same-origin' })
            console.log(response)
            if (!response.ok) {
              console.info('fetch failed')
              console.error(response)
              postForm.elements['submit'].disabled = false
            } else if (response.status > 200) {
              const err = document.querySelector('div#newPostErr')
              err.textContent = 'Update failed for some reason.'
              err.classList.remove('hidden')
              console.error(postJson)
              setTimeout(() => {
                err.classList.add('hidden')
                err.textContent = ''
                postForm.elements['submit'].disabled = false
                postForm.elements['reset'].click()
              }, 5000)
            } else {
              postJson = await response.json() 
              console.log(postJson)
              if (postJson?.post) {
                // postForm.elements['postId'].value = postJson.post.id ?? postJson.post._id
                postForm.elements['postSlug'].value = postJson.post.slug
                postForm.elements['postSlug'].disabled = false
                const msg = document.querySelector('div#newPostMsg')
                msg.textContent = 'Post details saved.'
                msg.classList.remove('hidden')
                // console.log(msg)
                setTimeout(() => {
                  postForm.elements['submit'].disabled = false
                  msg.classList.add('hidden')
                  msg.textContent = ''
                }, 5000) 
              } else {
                console.error('No Post?')
              }
            }
          } catch (e) {
            console.error(e)
          }
          console.log('finished')
        }
        postForm.addEventListener('submit', createPost)
      </script>
    </div>
  </article>
</main>
