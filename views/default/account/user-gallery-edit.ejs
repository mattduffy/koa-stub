<main>
  <article>
    <h1>Gallery: <%= album.name %></h1>
    <% if (view.message) { %>
    <div id="messages" class="messages">
      <span><%= view.message %></span>
    </div>
    <% } %>
    <% if (view.error) { %>
    <div id="errors" class="errors">
      <span><%= view.error%></span>
    </div>
    <% } %>
    <div class="gallery">
      <form name="edit" id="edit_Id" action="/account/gallery/<%= album.id %>" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>Make changes to gallery</legend>
          <div id="galleryUpdateMsg" class="messages hidden"></div>
          <div id="galleryUpdateErr" class="errors hidden"></div>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="albumId" id="albumId_Id" value="<%= album.id %>" required>
          <label for="albumName_Id">Album Name:</label>
          <input type="text" name="albumName" id="albumName_Id" value="<%= album.name %>" tabindex="1">
          <br>
          <label for="albumDescription_Id">Album Description:</label>
          <input type="text" name="albumDescription" id="albumDescription_Id" value="<%= album.description%>" tabindex="2">
          <br>
          <label for="albumKeywords_Id">Album Keywords:</label>
          <input type="text" name="albumKeywords" id="albumKeywords_Id" value="<%= album.keywords?.join(', ') %>" tabindex="3">
          <br>
          <label for="albumPublic_Id">Make Public:</label>
          <input type="checkbox" name="albumPublic" id="albumPublic_Id" <%= (album.public) ? "checked" : '' %> tabindex="4">
          <br>
          <label for="albumPreviewImage_Id">Select Preview Image</label>
          <select name="albumPreviewImage" id="albumPreviewImage_Id" tabindex="5">
            <option value=''>--select an image--</option>
            <% album.images.forEach((img) => { %>
              <% if (img.thumbnail) { %>
                <% if (album.previewImage === img.thumbnail) { %> 
                <option value="<%= img.thumbnail %>" selected><%= (img.thumbnail.split('/').slice(-1))[0] %></option>
                <% } else { %>
                <option value="<%= img.thumbnail %>"><%= (img.thumbnail.split('/').slice(-1))[0] %></option>
                <% } %>
              <% } %>
                <% if (album.previewImage === img.url) { %> 
              <option value="<%= img.url %>" selected><%= img.name %></option>    
              <% } else { %>
              <option value="<%= img.url %>"><%= img.name %></option>    
              <% } %>
            <% }) %>
          </select>
          <br>
          <input type="submit" name="submit" id="submit_Id" value="Update Album" tabindex="6">
          <input type="reset" name="reset" id="reset_Id" value="Clear" tabindex="7">
        </fieldset>
      </form>
      <form name="delete" data-name="<%= album.name %>" id="delete_Id" action="/account/galleries/delete/<%= album.id %>" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>Delete this gallery</legend>
          <div id="galleryDeleteMsg" class="messages hidden"></div>
          <div id="galleryDeleteErr" class="errors hidden"></div>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="albumId" id="albumId_Id" value="<%= album.id %>" required>
          <input type="submit" name="deleteGallery" id="deleteGallery_Id" value="Permanently delete this gallery." tabindex="1000">
        </fieldset>
      </form>
      <form name="addImage" id="addImage_Id" action="/account/gallery/<%= album.id %>/image/add" method="POST" enctype="multipart/form-data">
        <fieldset>
          <legend>Add image to gallery</legend>
          <div id="galleryNewImageMsg" class="messages hidden"></div>
          <div id="galleryNewImageErr" class="errors hidden"></div>
          <label>New image: <input type="file" name="image" id="image_Id" accept="image/*"></label><br>
          <input type="hidden" name="csrf-token" id="csrf-token_Id" value="<%= csrfToken %>" required>
          <input type="hidden" name="albumId" id="albumId_Id" value="<%= album.id %>" required>
          <input type="submit" name="add" id="add_Id" value="Add image to this gallery." tabindex="6">
          <input type="reset" name="reset" value="Reset">
        </fieldset>
      </form>
      <script nonce="<%= nonce %>">
        const origin = '<%= origin %>'
        const jwtAccess = '<%= jwtAccess %>'
        const albumName = '<%= album.name %>'
        window.forms = document.forms
        const galleryForm = forms.namedItem('edit')
        const deleteForm = forms.namedItem('delete')
        const addImageForm = forms.namedItem('addImage')
        function addImageReset(e) {
          e.target.elements['add'].disabled = false
          const div = e.target.querySelector(':scope div#galleryNewImageErr')
          div.textContent = ''
          div.classList.add('hidden')
        }
        addImageForm.addEventListener('reset', addImageReset)
        async function addImage(e) {
          e.preventDefault()
          e.stopPropagation()
          const form = e.target
          form.elements['add'].disabled = true
          if ( form.elements['image'].files.length < 1) {
            console.warn('no file selected.')
            return
          }
          const errDiv = form.querySelector(':scope div#galleryNewImageErr')
          const msgDiv = form.querySelector(':scope div#galleryNewImageMsg')
          const file = form.elements['image'].files[0]
          for (const f of window.forms) {
            if (f.name === file.name) {
              const err = `${file.name} already exists in this gallery.`
              console.log('File naming conflict!')
              console.log(err)
              errDiv.textContent = err
              errDiv.classList.remove('hidden')
              return false
            }
          }
          const formData = new FormData()
          formData.append('methodOverride', 'PUT')
          const albumId = form.elements['albumId']
          formData.append('albumId', albumId.value)
          const csrfToken = form.elements['csrf-token']
          formData.append('csrfTokenHidden', csrfToken.value)
          formData.append('image', file)
          // for (const a of formData.entries()) {
          //   console.log(a)
          // }
          const opts = {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
              'X-Http-Method-Override': 'PUT',
            },
            body: formData,
          }
          const request = new Request(`${origin}/account/gallery/${albumId.value}/image/add`, opts)
          const response = await fetch(request, { credentials: 'same-origin' })
          // console.log(response.ok, response.status, response.statusText)
          if (!response.ok) {
            // console.error(response.statusText)
            console.error(response)
          } else {
            const addImageResult = await response.json()
            // console.log(addImageResult)
            if (addImageResult.status > 200) {
              errDiv.textContent = 'Image wasn\'t added to the gallery for some reason.'
              errDiv.classList.remove('hidden')
              console.error(addImageResult)
              setTimeout(() => {
                const form = e.target
                errDiv.classList.add('hidden')
                errDiv.textContent = ''
                form.elements['add'].disabled = false
                form.elements['reset'].click()
              }, 5000)
            } else {
              console.log(addImageResult)
              const { sizes } = addImageResult.result
              msgDiv.textContent = `${file.name} was added to the gallery.`
              msgDiv.classList.remove('hidden')
              appendNewImage(addImageResult)
              setTimeout(() => {
                const form = e.target
                form.elements['add'].disabled = false
                msgDiv.classList.add('hidden')
                msgDiv.textContent = ''
                form.elements['reset'].click()
              }, 5000)
              // fill in rest of sucessful event handling functionality
              const imagesDiv = document.querySelector('div#images')
              const cloney = imagesDiv.lastElementChild.cloneNode(true)
              cloney.children[0].id = `${albumName}_${file.name}`
              cloney.children[0].name = file.name
              cloney.children[0][0].children[0].dataset.name = file.name
              cloney.children[0][0].children[1].children[0].src = `${origin}/${sizes.big}`
              cloney.children[0][0].children[2].children[0].src = `${origin}/${sizes.thb}`
              const numIndex = Number.parseInt(cloney.children[0][0].children[6].id.lastIndexOf('_')) + 1
              const num = Number.parseInt(cloney.children[0][0].children[6].id.substr(numIndex), 10)
              const re = new RegExp(`${num}$`)
              // console.log(`cloney num: ${num}, re: ${re}`)
              const cloneyForm = cloney.children[0]
              // csrf-token_Id_<n>
              cloneyForm.elements['csrf-token'].id = cloneyForm.elements['csrf-token'].id.replace(re, num + 1)
              // albumId_Id _<n>
              cloneyForm.elements['albumId'].id = cloneyForm.elements['csrf-token'].id.replace(re, num + 1)
              // fileName_Id_<n>
              cloneyForm.elements['fileName'].id = cloneyForm.elements['fileName'].id.replace(re, num + 1)
              cloneyForm.elements['fileName'].value = file.name
              // rotate_90_fsi_<n>
              cloneyForm.elements[`rotate_90_fsi_${num}`].id = cloneyForm.elements[`rotate_90_fsi_${num}`].id.replace(re, num + 1)
              // rotate_180_fsi_<n>
              cloneyForm.elements[`rotate_180_fsi_${num}`].id = cloneyForm.elements[`rotate_180_fsi_${num}`].id.replace(re, num + 1)
              // rotate_270_fsi_<n>
              cloneyForm.elements[`rotate_270_fsi_${num}`].id = cloneyForm.elements[`rotate_270_fsi_${num}`].id.replace(re, num + 1)
              // rotate_360_fsi_<n>
              cloneyForm.elements[`rotate_360_fsi_${num}`].id = cloneyForm.elements[`rotate_360_fsi_${num}`].id.replace(re, num + 1)
              // rotate_90_thb_<n>
              cloneyForm.elements[`rotate_90_thb_${num}`].id = cloneyForm.elements[`rotate_90_thb_${num}`].id.replace(re, num + 1)
              // rotate_180_thb_<n>
              cloneyForm.elements[`rotate_180_thb_${num}`].id = cloneyForm.elements[`rotate_180_thb_${num}`].id.replace(re, num + 1)
              // rotate_270_thb_<n>
              cloneyForm.elements[`rotate_270_thb_${num}`].id = cloneyForm.elements[`rotate_270_thb_${num}`].id.replace(re, num + 1)
              // rotate_360_thb_<n>
              cloneyForm.elements[`rotate_360_thb_${num}`].id = cloneyForm.elements[`rotate_360_thb_${num}`].id.replace(re, num + 1)
              // title_Id_<n>
              cloneyForm.elements[`title_Id_${num}`].id = cloneyForm.elements[`title_Id_${num}`].id.replace(re, num + 1)
              cloneyForm.elements[`title_Id_${num + 1}`].value = addImageResult.result?.title ?? null
              // description_Id_<n>
              cloneyForm.elements[`description_Id_${num}`].id = cloneyForm.elements[`description_Id_${num}`].id.replace(re, num + 1)
              cloneyForm.elements[`description_Id_${num + 1}`].value = addImageResult.result?.description ?? null
              // keywords_Id_<n>
              cloneyForm.elements[`keywords_Id_${num}`].id = cloneyForm.elements[`keywords_Id_${num}`].id.replace(re, num + 1)
              cloneyForm.elements[`keywords_Id_${num + 1}`].value = addImageResult.result?.keywords ?? null
              // hideImage_Id_<n>
              cloneyForm.elements[`hideImage_Id_${num}`].id = cloneyForm.elements[`hideImage_Id_${num}`].id.replace(re, num + 1)
              cloneyForm.elements[`hideImage_Id_${num + 1}`].checked = false
              // reset_Id_<n>
              cloneyForm.elements[`reset_Id_${num}`].id = cloneyForm.elements[`reset_Id_${num}`].id.replace(re, num + 1)
              cloneyForm.elements['rotate_full_size_image'].forEach((r) => {
                // console.log(r)
                r.addEventListener('change', rotateImage)
              })
              cloneyForm.elements['rotate_thumbnail_image'].forEach((r) => {
                // console.log(r)
                r.addEventListener('change', rotateImage)
              })
              window.cloned = cloney
              images.appendChild(cloney)
              cloneyForm.addEventListener('submit', updateImage)
              cloneyForm.addEventListener('reset', imageReset)
              const deleteImageSpan = cloney
                .firstElementChild
                .firstElementChild
                .firstElementChild
              deleteImageSpan.addEventListener('click', async (e) => {
                await deleteImage(e, deleteImageSpan.dataset)
              })
            }
          }
        }
        addImageForm.addEventListener('submit', addImage)

        function appendNewImage(result) {
          console.log('appending new image to end of list...')
          // console.log(result)
          const div = document.querySelector('div#images')
          const newDiv = div.children[0].cloneNode(true)
          // console.log(newDiv)
        }

        function createDialog(thing) {
          const spanPrompt = document.createElement('span')
          spanPrompt.setAttribute('id', 'prompt')
          const dialogText = `You are about to delete <em>${thing.name}</em>.<br>`
            + 'This action cannot be undone.<br>'
            + `Are you sure you want to delete this ${thing.type}?<br>`
          spanPrompt.innerHTML = dialogText
          const spanYes = document.createElement('span')
          spanYes.innerHTML = 'Yes'
          spanYes.setAttribute('id', 'yes')
          spanYes.classList.add('dialogYes')
          const spanNo = document.createElement('span')
          spanNo.innerHTML = 'No'
          spanNo.setAttribute('id', 'no')
          spanNo.classList.add('dialogNo')
          const dialog = document.createElement('dialog')
          // dialog.setAttribute('data-uid', dataset.id)
          dialog.appendChild(spanPrompt)
          dialog.appendChild(document.createElement('br'))
          dialog.appendChild(spanNo)
          dialog.appendChild(spanYes)
          document.body.appendChild(dialog)
          spanYes.addEventListener('click', (y) => {
            y.preventDefault()
            y.stopPropagation()
            dialog.close('yes')
          })
          spanNo.addEventListener('click', (n) => {
            n.preventDefault()
            n.stopPropagation()
            dialog.close('no')
          })
          return dialog
        }
        async function deleteAlbum(e) {
          e.preventDefault()
          e.stopPropagation()
          deleteForm.elements.deleteGallery.disabled = true
          const modalDialog = createDialog({ name: deleteForm.dataset.name, type: 'album' })
          modalDialog.addEventListener('close', async () => {
            // console.info(`dialog.returnValue: ${modalDialog.returnValue}`)
            if (modalDialog.returnValue === 'yes') {
              console.log('Dialog Yes clicked')
              const formdata = new FormData()
              const csrfToken = deleteForm.elements['csrf-token']
              formdata.append('csrfTokenHidden', csrfToken.value)
              const albumId = deleteForm.elements['albumId']
              formdata.append('albumId', albumId.value)
              const opts = {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  Authorization: `Bearer ${jwtAccess}`,
                  'X-Http-Method-Override': 'delete',
                },
                body: formdata,
              }
              // for (f of formdata) {
              //   console.log(f.value())
              // }
              const request = new Request(`${origin}/account/galleries/delete/${albumId.value}`, opts)
              const response = await fetch(request, { credentials: 'same-origin' })
              if (!response.ok) {
                // console.error(response.statusText)
                console.error(response)
              } else {
                const deleteResult = await response.json()
                if (deleteResult.status > 200) {
                  const err = document.querySelector('div#galleryDeleteErr')
                  err.textContent = 'Delete failed for some reason.'
                  err.classList.remove('hidden')
                  console.error(deleteResult)
                  setTimeout(() => {
                    err.classList.add('hidden')
                    err.textContent = ''
                    deleteForm.elements.deleteGallery.disabled = false
                  }, 1750)
                } else {
                  console.log(deleteResult)
                  const msg = document.querySelector('div#galleryDeleteMsg')
                  msg.textContent = 'Gallery deleted.'
                  msg.classList.remove('hidden')
                  setTimeout(() => {
                    msg.classList.add('hidden')
                    msg.textContent = ''
                  }, 1750)
                }
              }     
            } else {
              console.log('delete canceled.')
              deleteForm.elements.deleteGallery.disabled = false
              deleteForm.reset()
            }
          })
          modalDialog.showModal()
        }
        deleteForm.addEventListener('submit', deleteAlbum)

        async function updateAlbum(e) {
          e.preventDefault()
          e.stopPropagation()
          const formData = new FormData()
          const csrfToken = galleryForm.elements['csrf-token']
          formData.append('csrfTokenHidden', csrfToken.value)
          const albumId = galleryForm.elements['albumId']
          formData.append('albumId', albumId.value)
          if (galleryForm.elements['albumName'].value !== '') {
            const albumName = galleryForm.elements['albumName']
            formData.append('albumName', albumName.value)
          }
          if (galleryForm.elements['albumDescription'].value !== '') {
            const albumDescription = galleryForm.elements['albumDescription']
            formData.append('albumDescription', albumDescription.value)
          }
          if (galleryForm.elements['albumKeywords'].value !== '') {
            const albumKeywords = galleryForm.elements['albumKeywords']
            formData.append('albumKeywords', albumKeywords.value)
          }
          const prev = galleryForm.elements['albumPreviewImage']
          if (prev[prev.selectedIndex].value !== '') {
            formData.append('albumPreviewImage', prev[prev.selectedIndex].value)
          }
          const albumPublic = galleryForm.elements['albumPublic']
          formData.append('albumPublic', albumPublic.checked)
          const opts = {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: `Bearer ${jwtAccess}`,
            },
            body: formData,
          }
          const request = new Request(`${origin}/account/gallery/${albumId.value}`, opts)
          // console.log(request)
          const response = await fetch(request, { credentials: 'same-origin' })
          if (!response.ok) {
            console.error(response.statusText)
          } else {
            const updateResult = await response.json()
            if (updateResult.status > 200) {
              const err = document.querySelector('div#galleryUpdateErr')
              err.textContent = 'Update failed for some reason.'
              err.classList.remove('hidden')
              console.error(updateResult)
              setTimeout(() => {
                err.classList.add('hidden')
                err.textContent = ''
              }, 1750)
            } else {
              console.log(updateResult)
              const msg = document.querySelector('div#galleryUpdateMsg')
              msg.textContent = 'Gallery details updated.'
              msg.classList.remove('hidden')
              setTimeout(() => {
                msg.classList.add('hidden')
                msg.textContent = ''
              }, 1750)
              // galleryForm.reset()
            }
          }
        }
        galleryForm.addEventListener('submit', updateAlbum) 

      </script>
    </div>
    <div id="images">
      <% (await album.getJson()).images.forEach((image, i) => { %>
      <div class="imagePair">
        <form id="<%= `${album.name}_${image.name}` %>" name="<%= image.name %>" data-type="image">
          <fieldset>
            <span class="deleteImage" data-name="<%= image.name %>" data-albumid="<%= album.id %>" data-token="<%= csrfToken %>">Delete this image.</span>
            <figure style="display: inline-block;">
              <img src="<%= `${origin}/${image.big}` %>" alt="<%= image.description %>" class="imgFull" width="150px">
              <figcaption>Full size image.</figcaption>
            </figure>
            <% if (image.thumbnail) { %>
            <figure style="display: inline-block;">
              <img src="<%= `${origin}/${image.thumbnail}` %>" alt="<%= image.description %>" class="imgThumbnail" width="*">
              <figcaption>Thumbnail image.</figcaption>
            </figure>
            <% } %>
            <br>
            <div id="imageUpdateMsg" class="messages hidden"></div>
            <div id="imageUpdateErr" class="errors hidden"></div>
            <input type="hidden" name="csrf-token" id="csrf-token_Id_<%= i %>" value="<%= csrfToken %>">
            <input type="hidden" name="albumId" id="albumId_Id_<%= i %>" value="<%= album.id %>">
            <label>File Name: <input type="text" name="fileName" id="fileName_Id_<%= i %>" value="<%= image.name %>" disabled></label><br>
            <fieldset>
              <legend>Rotate Full Size Image</legend>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left90" title="Rotate counter-clockwise -90&deg; "alt="Rotate counter-clockwise -90&deg;"> 
                <input type="radio" name="rotate_full_size_image" id="rotate_90_fsi_<%= i %>" value="90" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left180" title="Rotate counter-clockwise -1800&deg; "alt="Rotate counter-clockwise -180&deg;"> 
                <input type="radio" name="rotate_full_size_image" id="rotate_180_fsi_<%= i %>" value="180" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left270" title="Rotate counter-clockwise -270&deg; "alt="Rotate counter-clockwise -270&deg;"> 
                <input type="radio" name="rotate_full_size_image" id="rotate_270_fsi_<%= i %>" value="270" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left360" title="Rotate counter-clockwise -360&deg; "alt="Rotate counter-clockwise -3600&deg;"> 
                <input type="radio" name="rotate_full_size_image" id="rotate_360_fsi_<%= i %>" value="0" tabindex="7">
              </label>
            </fieldset>
            <fieldset>
              <legend>Rotate Thumbnail Image</legend>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left90" title="Rotate counter-clockwise -90&deg; "alt="Rotate counter-clockwise -90&deg;"> 
                <input type="radio" name="rotate_thumbnail_image" id="rotate_90_thb_<%= i %>" value="90" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left180" title="Rotate counter-clockwise -1800&deg; "alt="Rotate counter-clockwise -180&deg;"> 
                <input type="radio" name="rotate_thumbnail_image" id="rotate_180_thb_<%= i %>" value="180" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left270" title="Rotate counter-clockwise -270&deg; "alt="Rotate counter-clockwise -270&deg;"> 
                <input type="radio" name="rotate_thumbnail_image" id="rotate_270_thb_<%= i %>" value="270" tabindex="7">
              </label>
              <label>
                <img src="/i/rotate_40x40.png" class="rotate left360" title="Rotate counter-clockwise -360&deg; "alt="Rotate counter-clockwise -3600&deg;"> 
                <input type="radio" name="rotate_thumbnail_image" id="rotate_360_thb_<%= i %>" value="0" tabindex="7">
              </label>
            </fieldset>
            <label>Title:
              <input type="text" name="title" id="title_Id_<%= i %>" value="<%= image.title %>" class="title" tabindex="7">
            </label>
            <br>
            <label>Description: 
              <input type="text" name="description" id="description_Id_<%= i %>" value="<%= image.description %>" class="description" tabindex="7">
            </label>
            <br>
            <label>Keywords: 
              <input type="text" name="keywords" id="keywords_Id_<%= i %>" value="<%= image.keywords?.join(', ') ?? '' %>" class="keywords" tabindex="7">
            </label>
            <br>
            <label>Hide Image: 
              <input type="checkbox" name="hideImage" id="hideImage_Id_<%= i %>" <%= (image.hide) ? 'checked' : ''  %> tabindex="7">
            </label>
            <br>
            <input type="submit" value="Update Image Metadata" tabindex="7">
            <input type="reset" name="reset" id="reset_Id_<%= i %>" value="Reset" tabindex="7">
          </fieldset>
        </form>
      </div>
      <% }) %>
    </div>
    <script nonce="<%= nonce %>">
      function rotateImage(e) {
        e.stopPropagation()
        e.preventDefault()
        let size = e.target.id.match(/(?<size>fsi|thb)/)?.groups?.size ?? null
        if (size === null) {
          console.info(`rotate image size failed: size is ${size}`)
          return
        }
        // console.log(`size: ${size}`)
        let image 
        if (size === 'fsi') {
          image = e.target.parentElement.parentElement.parentElement.children[1].children[0]
        } else {
          image = e.target.parentElement.parentElement.parentElement.children[2].children[0]
        }
        const degrees = `-${e.target.value}deg`
        // console.log(e.target, image, degrees)
        image.style.transform = `rotate(${degrees})`
      }
      function imageReset(e) {
        e.target.elements[0].children[1].firstElementChild.style = "transform: rotate(0deg)"
        e.target.elements[0].children[2].firstElementChild.style = "transform: rotate(0deg)"
      }
      const imgEditForms = document.querySelectorAll('form[data-type="image"]')
      imgEditForms.forEach((f) => {
        f.addEventListener('reset', imageReset)
        f.elements['rotate_full_size_image'].forEach((r) => {
          r.addEventListener('change', rotateImage)
        })
        f.elements['rotate_thumbnail_image'].forEach((r) => {
          r.addEventListener('change', rotateImage)
        })
      })
      async function deleteImage(e, dataset) {
        e.preventDefault()
        e.stopPropagation()
        // console.log(dataset)
        const modalDialog = createDialog({ name: dataset.name, type: 'image' })
        modalDialog.addEventListener('close', async () => {
          // console.info(`dialog.returnValue: ${modalDialog.returnValue}`)
          if (modalDialog.returnValue === 'yes') {
            console.log('Dialog Yes clicked')
            const formData = new FormData()
            formData.append('image', dataset.name)
            formData.append('csrfToken', dataset.token)
            formData.append('csrfTokenHidden', dataset.token)
            formData.append('methodOverride', 'DELETE')
            // for (const a of formData.entries()) {
            //   console.log(a)
            // }
            const opts = {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                Authorization: `Bearer ${jwtAccess}`,
                'X-Http-Method-Override': 'delete',
              },
              body: formData,
            }
            const request = new Request(`${origin}/account/gallery/${dataset.albumid}/image/delete`, opts)
            let response
            let deleteResult
            try {
              response = await fetch(request, { credentials: 'same-origin' })
              // console.log(response)
            } catch (e) {
              console.warn('Response was not good.')
              console.warn(e)
              return
            }
            if (!response.ok) {
              console.warn('Request failed.')
              console.warn(`response status text: (${response.status}) ${response.statusText}`)
              return
            }
            try {
              deleteResult = await response.json()
              console.info(deleteResult)
              if (response.status > 200) {
                console.warn(response.statusText)
              } else if (response.status === 200 && deleteResult?.err) {
                console.warn(deleteResult.err)
              } else {
                console.log('things seem ok.') 
                const deleteSpanText = `${dataset.name} has been deleted!`
                e.target.textContent = deleteSpanText
                setTimeout(() => {
                  const parent = document.querySelector('div#images')
                  const deleted = e.target.parentNode.parentNode.parentNode
                  // console.log('deleted: ', deleted)
                  // console.log('parent: ', parent)
                  parent.removeChild(deleted)
                }, 3000)
              }
            } catch (e) {
              console.warn(e)
              return
            }
          } else {
            console.log('delete canceled.')
          }
        })
        modalDialog.showModal()
      }
      document.querySelectorAll('span.deleteImage').forEach((d) => {
        d.addEventListener('click', async (e) => {
          await deleteImage(e, d.dataset)
        })
      })
      async function updateImage(e) {
        e.stopPropagation()
        e.preventDefault()
        form = e.target
        const formData = new FormData()
        const csrfToken = form.elements['csrf-token']
        formData.append('csrfTokenHidden', csrfToken.value)
        const albumId = form.elements['albumId']
        formData.append('albumId', albumId.value)
        const name = form.elements.fileName
        formData.append('imageName', name.value)
        if (form.elements['rotate_full_size_image']?.value !== '') {
          const rotate_full = form.elements['rotate_full_size_image'].value
          formData.append('rotate_full_size_image', rotate_full)
        }
        if (form.elements['rotate_thumbnail_image']?.value !== '') {
          const rotate_thb = form.elements['rotate_thumbnail_image'].value
          formData.append('rotate_thumbnail_image', rotate_thb)
        }
        if (form.elements['title'].value !== '') {
          const title = form.elements.title
          formData.append('imageTitle', title.value)
        }
        if (form.elements['description'].value !== '') {
          const description = form.elements.description
          formData.append('imageDescription', description.value)
        }
        if (form.elements['keywords'].value !== '') {
          const keywords = form.elements.keywords
          formData.append('imageKeywords', keywords.value)
        }
        formData.append('imageHide', form.elements['hideImage'].checked)
        for (const a of formData.entries()) {
          console.log(a)
        }
        // return
        const opts = {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${jwtAccess}`,
          },
          body: formData,
        }
        const err = form.querySelector(':scope > fieldset > div#imageUpdateErr')
        const msg = form.querySelector(':scope > fieldset > div#imageUpdateMsg')
        const request = new Request(`${origin}/account/gallery/${albumId.value}/image/${name.value}`, opts)
        let response
        let updateResult
        try {
          response = await fetch(request, { credentials: 'same-origin' })
          console.log(response)
        } catch (e) {
          err.textContent = 'Response was not good.'
          err.classList.remove('hidden')
          console.warn(e)
          return
        }
        if (!response.ok) {
          err.textContent = 'Request failed.'
          err.classList.remove('hidden')
          console.warn(`response status text: (${response.status}) ${response.statusText}`)
          return
        }
        try {
          updateResult = await response.json()
          console.info(updateResult)
          if (response.status > 200) {
            err.textContent = 'Update failed for some reason.'
            err.classList.remove('hidden')
          } else if (response.status === 200 && updateResult?.err) {
            err.textContent = updateResult.msg
            err.classList.remove('hidden')
          } else {
            msg.textContent = 'Image details updated.'
            msg.classList.remove('hidden')
            setTimeout(() => {
              msg.classList.add('hidden')
              msg.textContent = ''
            }, 1750)
            if (updateResult.sizes) {
              const figs = form.querySelectorAll(':scope > fieldset > figure')
              figs[0].children[0].src = `${origin}/${updateResult.sizes.big}`
              figs[0].children[0].style = 'transform: rotate(0deg)'
              figs[1].children[0].src = `${origin}/${updateResult.sizes.thb}`
              figs[1].children[0].style = '' 
            }
          }
        } catch (e) {
          err.textContent = 'JSON was not good.'
          // err.textContent = updateResult.err
          err.classList.remove('hidden')
          console.warn(e)
          return
        }
      }
      // 
      const imgForms = document.querySelectorAll(`form[id^=${albumName}]`)
      for (const form of imgForms) {
        form.addEventListener('submit', updateImage)
      }
    </script>
  </article>
</main>

